package org.jorion.euler.problem;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import org.jorion.euler.util.MathUtils;
import org.jorion.euler.util.PrimeUtils;
import org.jorion.euler.util.Utils;

/**
 * Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5 :
 * <pre>
 *     2^2= 4,    2^3=  8,    2^4=  16(1), 2^5=   32,    2^6=    64(2), 2^7=    128, 2^8=   256(3), 2^9=   512(4), 2^10=   1024
 *     3^2= 9,    3^3= 27,    3^4=  81(5), 3^5=  243,    3^6=   729(6), 3^7=   2187, 3^8=  6561(7), 3^9= 19683   , 3^10=  59049(8)
 *     ---
 *     4^2=16(1), 4^3= 64(2), 4^4= 256(3), 4^5= 1024,    4^6=  4096(A), 4^7=  16384, 4^8= 65536   , 4^9=262144(B), 4^10=1048576
 *     5^2=25,    5^3=125,    5^4= 625,    5^5= 3125,    5^6= 15625   , 5^7=  78125, 5^8=390625
 *     6^2=36,    6^3=216,    6^4=1296,    6^5= 7776,    6^6= 46656   , 6^7= 279936
 *     7^2=49,    ...
 *     8^2=64(2), 8^3=512(4), 8^4=4096(a), 8^5=32768,    8^6=262144(b), 8^7=2097152
 *     9^2=81(5), 9^3=729(6), 9^4=6561(7), 9^5=59049(8), 9^6=531441
 * </pre>
 *  If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * <pre>
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * </pre>
 * How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */
// TODO
public class Euler029 {

	// --- Methods ---
	public static void main(String[] args) {

		// 8: 44; 9: 54; 17: 226; 36: 1085 (et pas 1102)
		final int max = 36;
		long res; // 9459 x; 9281
		long delta;

		Utils.start();
		res = calc0(max);
		delta = Utils.stop();
		Utils.print("Brute  ", res, delta);

		Utils.start();
		res = calc1(max);
		delta = Utils.stop();
		Utils.print("Simple ", res, delta);
	}

	private static long calc0(int max) {

		Set<BigInteger> set = new TreeSet<>();
		for (int a = 2; a <= max; a++) {
			for (int b = 2; b <= max; b++) {
				BigInteger aa = new BigInteger("" + a);
				BigInteger val = aa.pow(b);
				set.add(val);
			}
		}
		// set.stream().forEach(System.out::println);
		return set.size();
	}

	private static long calc1(int max) {

		int sum = 0;
		boolean[] primes = PrimeUtils.isPrimeSoE(max);
		Map<Integer, List<Integer>> mul = new TreeMap<>();
		for (int a = 2; a <= max; a++) {
			sum += (max - 1);
			// prime
			if (primes[a]) {
				List<Integer> list = new ArrayList<>();
				for (int b = 2; b <= max; b++) {
					list.add(b);
				}
				mul.put(a, list);
			}
			// composite
			else {
				Map<Integer, Integer> factors = MathUtils.findPrimeFactors(a);
				// a = multiple of a single prime ? (ex: 8 = 2 ^ 3)
				if (factors.size() == 1) {
					// a = prime * exp
					int prime = factors.keySet().iterator().next();
					int exp = factors.get(prime);
					List<Integer> list = mul.get(prime);
					for (int b = 2; b <= max; b++) {
						int val = exp * b;
						if (list.contains(val)) {
							//System.out.println("-- " + a + " = " + prime + "^" + exp + ", " + a + "^" + b + " = " + prime + "^" + (exp * b));
							sum--;
						} else {
							list.add(val);
							//System.out.println("++ " + a + " = " + prime + "^" + exp + ", " + a + "^" + b + " = " + prime + "^" + (exp * b));
						}
					}
				}
			}
		}
		return sum;
	}

}

//for (int b = 2; b <= max; b++) {
//	System.out.print(a + " = " + prime + "^" + exp + ", " + a + "^" + b + " = " + prime + "^" + (exp * b));
//	if (exp * b <= max) {
//		sum--;
//		System.out.print("***");
//	}
//	System.out.println();
//}
