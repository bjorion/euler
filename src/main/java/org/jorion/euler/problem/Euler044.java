package org.jorion.euler.problem;

import org.jorion.euler.util.Utils;

/**
 * Pentagonal numbers are generated by the formula, Pn = n(3n−1)/2. The first ten pentagonal numbers are:
 * 
 * <pre>
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * </pre>
 * 
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 * <p>
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj|
 * is minimised; what is the value of D?
 */
public class Euler044
{
    // --- Methods ---
    public static void main(String[] args)
    {
        final int max = 5_000;
        // j = 1020; Pj = 1_560_090
        // k = 2167; Pk = 7_042_750
        // D = 5_482_600 = P(1912); S = 8_602_840 = P(2395)
        long res;
        long delta;

        Utils.start();
        res = calc1(max);
        delta = Utils.stop();
        Utils.print("Simple ", res, delta);
    }

    private static long calc1(int max)
    {
        int[] arr = new int[max];
        for (int n = 1; n < max; n++) {
            arr[n] = p(n);
        }

        boolean solved = false;
        int res = 0;

        for (int i = 3; !solved && i < max; i++) {
            int current = arr[i];
            for (int j = i - 1; !solved && j >= 0; j--) {
                // current = pj + pk
                // we know the sum of "pj + pk" (= "current") is pentagonal, as well as "pk"
                int pk = arr[j];
                // then we check pj
                int pj = current - pk;
                if (isPentagonal(pj)) {
                    // finally we check the difference "pk - pj"
                    if (isPentagonal(pk - pj)) {
                        solved = true;
                        // System.out.println("Pentagonal numbers: " + pj + " and " + pk);
                        // System.out.println("Difference: " + (pk - pj));
                        res = pk - pj;
                    }
                }
            }
        }
        return res;
    }

    /**
     * "p" is a pentagon number if p = n(3n−1)/2
     * <p>
     * solution: n = (1 + sqrt(24p + 1)) / 6 => 24p+1 = (6n−1)^2
     * <p>
     * => 24p+1 is a square number whose root is 5 modulo 6.
     * 
     * @param p the number to check
     * @return true if "p" is pentagonal
     */
    private static boolean isPentagonal(int p)
    {
        boolean pentagonal = false;
        int q = 24 * p + 1;
        int sqrt = (int) Math.sqrt(q);
        if (sqrt * sqrt == q) {
            pentagonal = (sqrt % 6 == 5);
        }
        return pentagonal;
    }

    /**
     * @param n any integer
     * @return the pentagonal value of "n"
     */
    private static int p(int n)
    {
        return n * (3 * n - 1) / 2;
    }

}